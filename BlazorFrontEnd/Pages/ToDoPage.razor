@page "/"
@using CommonLibrary.Models
@inject HttpClient Http

<h1>To-Do List</h1>

@if (_items == null)
{
    <p><em>Loading...</em></p>
}
else if (!_items.Any())
{
    <p><em>No ToDo items exist.  Please add some.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Remove</th>
                <th>Date</th>
                <th>Description</th>
                <th>Is Complete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _items)
            {
                <tr>
                    <td><button onclick="@(() => RemoveTodo(item.Id))"><i class="oi oi-trash"></i></button></td>
                    <td>@item.DateCreated</td>
                    <td>@item.Description</td>
                    <td><input type=checkbox onchange="@(() => ToggleToDo(item.Id))" /> @item.IsComplete</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (_items != null)
{
    <input placeholder="A new ToDo item" bind="@_newItem" />
    <button onclick="@AddTodo">Create</button>
}


@functions{
    IList<ToDoItem>? _items = new List<ToDoItem>();
    private string _newItem;

    protected override async Task OnInitializedAsync()
    {
        _items = await Http.GetFromJsonAsync<List<ToDoItem>>("api/todos");
    }

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(_newItem))
        {
            _items?.Add(new ToDoItem()
            {
                DateCreated = DateTime.Now,
                Description = _newItem,
                Id = Guid.NewGuid()
            });

            _newItem = string.Empty;
        }
    }

    private void ToggleToDo(Guid id)
    {
        //First find the item
        var todo = _items.First(x => x.Id == id);
        todo.IsComplete = !todo.IsComplete;
    }

    private void RemoveTodo(Guid id)
    {
        _items.Remove(_items.First(x => x.Id == id));
    }
}