@page "/"
@using CommonLibrary.Models
@using System.Text.Json
@using System.Text
@inject HttpClient Http

<h1>To-Do List</h1>

@if (_items == null)
{
    <p><em>Loading...</em></p>
}
else if (!_items.Any())
{
    <p><em>No ToDo items exist.  Please add some.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Remove</th>
                <th>Date</th>
                <th>Description</th>
                <th>Is Complete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _items)
            {
                <tr>
                    <td><button onclick="@(() => RemoveTodo(item.Id))"><i class="oi oi-trash"></i></button></td>
                    <td>@item.DateCreated</td>
                    <td>@item.Description</td>
                    <td><button onclick="@(() => ToggleToDo(item.Id))">@item.IsComplete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@if (_items != null)
{
    <input placeholder="A new ToDo item" @bind="@_newItem" onkeydown="@Enter"/>
    <button onclick="@AddTodo">Create</button>
}

@if (_loading == true)
{
    <p><em>Loading...</em></p>
}


@functions{
    IList<ToDoItem>? _items = null;
    private string _newItem = String.Empty;
    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _items = await Http.GetFromJsonAsync<List<ToDoItem>>("api/ToDoItems");
        }
        catch (JsonException)
        {
            _items = null;
        }
    }

    private async void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(_newItem))
        {
            _loading = true;
            StateHasChanged();
            var newTodDo = new ToDoItem
            {
                Id = Guid.NewGuid(),
                Description = _newItem,
                DateCreated = DateTime.Now,
                IsComplete = false
            };
            await Http.PostAsync(
                "api/ToDoItems", 
                new StringContent(JsonSerializer.Serialize(newTodDo), 
                    Encoding.UTF8, 
                    "application/json"));
            _items = await Http.GetFromJsonAsync<List<ToDoItem>>("api/ToDoItems");

            _newItem = string.Empty;
            _loading = false;
            StateHasChanged();
        }
    }

    private async void ToggleToDo(Guid id)
    {
        _loading = true;
        StateHasChanged();
        var toDo = _items!.First(x => x.Id == id);
        var toggeledToDo = new ToDoItem
        {
            Id = toDo.Id,
            DateCreated = toDo.DateCreated,
            Description = toDo.Description,
            IsComplete = !toDo.IsComplete
        };
        
        
        await Http.PutAsync(
            $"api/ToDoItems/{id.ToString()}", 
            new StringContent(JsonSerializer.Serialize(toggeledToDo), 
                Encoding.UTF8, 
                "application/json"));
        _items = await Http.GetFromJsonAsync<List<ToDoItem>>("api/ToDoItems");
        _loading = false;
        StateHasChanged();
        
    }

    private async void RemoveTodo(Guid id)
    {
        _loading = true;
        StateHasChanged();
        await Http.DeleteAsync($"api/ToDoItems/{id.ToString()}");
        _items = await Http.GetFromJsonAsync<List<ToDoItem>>("api/ToDoItems");
        _loading = false;
        StateHasChanged();
    }
    
    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            AddTodo();
        }
    }
}